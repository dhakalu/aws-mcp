name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: 📦 Install dependencies
      run: uv sync --extra dev
    
    - name: 🧹 Lint and format check
      run: |
        uv run isort --check-only --diff src/ tests/
        uv run black --check --diff src/ tests/
        uv run ruff check src/ tests/
    
    - name: 🔍 Type check with MyPy
      run: uv run mypy src/

  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: 📦 Install dependencies
      run: uv sync --extra dev
    
    - name: 🧪 Run tests with pytest
      run: uv run pytest --cov=aws_mcp --cov-report=xml --cov-report=term-missing
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: 🐍 Set up Python
      run: uv python install 3.13
    
    - name: 📦 Install dependencies
      run: uv sync --extra dev
    
    - name: 🛡️ Run safety check for known security vulnerabilities
      run: uv run pip install safety && uv run safety check --json
      continue-on-error: true
    
    - name: 🔐 Run bandit security linter
      run: uv run pip install bandit && uv run bandit -r src/
      continue-on-error: true

  build-package:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [quality-check, test-suite]
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: 🐍 Set up Python
      run: uv python install 3.13
    
    - name: 📦 Install dependencies
      run: uv sync --extra dev
    
    - name: 🏗️ Build package
      run: uv build
    
    - name: ✅ Check package with twine
      run: uv run pip install twine && uv run twine check dist/*
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  test-install:
    name: 🧪 Test Installation
    runs-on: ubuntu-latest
    needs: [build-package]
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: 🔧 Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: 🐍 Set up Python
      run: uv python install 3.13
    
    - name: 🧪 Test wheel installation
      run: |
        uv venv test-env
        source test-env/bin/activate
        uv pip install dist/*.whl
        aws-mcp --help || echo "Command not found, but package installed"
        python -c "import aws_mcp; print('Package imported successfully')"
